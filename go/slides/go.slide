Programming Languages
Go Programming Language
3 Apr 2017

TIMOTHEE RENE GIVOIS MENDEZ
LUIS DANIEL HERNANDEZ SANDOVAL
ALVARO ANTONIO SOTO ESCOBAR


https://github.com/alsotoes/MCS_programmingLanguages/tree/master/go
See github page for the polynomial code and all the examples.

https://github.com/alsotoes/MCS_programmingLanguages
Or clone the repo and check the go directory

https://golang.org
See golang.org about everything else.

https://en.wikipedia.org/wiki/Gopher_(animal)
Search about gopher, the golang mascot.

* 
.image images/gorocks.jpg

* Go

- Go's mascot is a gopher
- Paradigm: compiled, concurrent, imperative, structured
- Designed by: Robert Griesemer, Rob Pike, Ken Thompson
- Developer: Google Inc.
- First appearance: November 10, 2009
- Typing discipline: strong, static, inferred, structural
- Implementation language: Go, assembly language, previously C (gc); C++ (gccgo)
- OS: Linux, macOS, FreeBSD, NetBSD, OpenBSD,Windows, Plan 9, DragonFly BSD, Solaris
- License: BSD
- Filename extensions: .go
- Website: https://golang.org


* Some more cool features

Go is a new programming language (2009) that didn’t evolve or borrow from existing programming languages such as C# and Java.

Go focuses on real-world practices for building next-generation applications on the cloud as well as distributed and concurrent computing environments, and for system programming.

Is a statically typed (the type of a variable is known at compile time), garbage-collected, natively compiled programming language that mostly belongs to the C family.

Highly pragmatic maybe for some developers, Go refuses to compile programs with unused variables or imports.

.play code/refuse.go /^func main/,/^}/

* Syntax

- For one line comments, we may use //. For multi line comment we can use /* to start a comment and */ to finish it.
- Unlike C, go doesn't need to have semicolons at the end of a statement.
- Compiler detects automatically where to insert semicolons.

.play code/hello_world.go /^func main/,/^}/

* Types

- In Go, everything is treated as a data type, from basic types like ints or strings or more complex structures such as structs, arrays or even functions and interfaces.
- Strings can be created either by double quotes or single ticks.
- Double quotes doesn't accept newlines, while singe tick does.
- Strings are 0 based index arrays of arbitrary bytes and they have a variable len associated with them.
- Runes are uint32 which represent a valid unicode code point.

.play -edit code/strings.go /^func main/,/^}/

* Number Representation

- For number representation Go has integer, floats and complex data types.
- Number representations can have sign or not.
- Integer can be 8, 16, 32 or 64 bits long, Floats are 32 or 64 bits long, complex are 64 bit or 128 bits long.
- Default size of numbers are: 16 bits for ints, 32 bits for floats and 64 bits for complex

.play code/numbers.go /^func main/,/^}/

* Booleans and pointers

- Booleans are represented just by one bit that either represents true or false.
- Pointers are data types too, they are valid memory addresses.
- Pointer have two operands: * that denotes a variable pointer and & that gives the pointer of a variable.
- Not every value has a pointer but every variable has a pointer.

.play code/pointers_booleans.go /^func main/,/^}/

* Arrays
- In Go, Arrays are fixed size.
- Size needs to be expressed in declaration.
- Arrays can only have one kind of type in it.
- 0 based index

.play code/arrays.go /^func main/,/^}/

* Slices
- Slices are like references or views of arrays.
- It's length is dynamic, it can change.
- Slices does not store data, they just reference them.
- With brackets we can create slices from arrays.
  a[1:3]

.play code/slices.go /^func main/,/^}/

* Slices
- They have an underlying array
- So, if we modify an element of a slice, we are modifying the array. Other references will see this modification later.

.play code/slices2.go /^func main/,/^}/

* Slices

- We can create directly slices, Go will first create an array and then reference it.
  []bool{true, true, false}
- Length: Number of elements in the slice.
- Capacity: number of elements in the underlying array, counting from the first element in the slice.

.play code/slices3.go /^func main/,/^}/

* Maps
- Association of two values, a key and an element.
- Not bounded to a specific size, if we give it, we'll help performance of the program.
- Built-in delete method

.play code/maps.go /^func main/,/^}/

* Structs
-

* Variable names
- Variable names needs to have at least one letter at the beginning following by any number of alphanumeric characters.
- There are reserved keywords that cannot be used as variable names:
  select  case      defer   go
  map     struct    chan    else
  goto    package   switch  const
  if      range     type    continue
  for     import    return  var
  fallthrough
- Other special keywords used by the language like int or float can be used as variable names at coder discretion.

* Declarations and assignments
- blah

* Control structure
- For loops
- Switch / Case
- Break / Continue

* Functions
- blah

* Methods
- blah

* Interfaces
- blah

* Memory Management
What Goes Where? The Go Programming Language Specification does not define where items will be allocated.

However, certain requirements will exclude some choices of memory in certain conditions. For instance:

- The size of the data segment cannot change at run time, and therefore cannot be used for data structures that change size.
- Heap (or free store), an area of memory used for dynamic memory allocation.
- Variables allocated in the stack unlike heap allocated, are destroyed when the rest of the stack is destroyed (when the function returns).

* Garbage collection (1), background.
John McCarthy invented something called “garbage collection” all the way back in 1958.

.image images/john_mccarthy.png

* Garbage collection (2), GOgc.

- Bjarne Stroustrup
  "C programmers think memory management is too important to be left to the computer.
  Lisp programmers think memory management is too important to be left to the user."


The Go garbage collector occasionally has to stop the world to complete the collection task, but GO the collector is designed so that the stop the world task will take no more than 10 milliseconds.

Garbage collection brings significant costs: general overhead, latency, and complexity of the implementation, in a concurrent object-oriented language it's almost essential to have automatic memory management because the ownership of a piece of memory can be tricky to manage as it is passed around among concurrent executions.

The language is much easier to use because of garbage collection.

* Garbage collection (3), stop-the-world.
.play code/mem_address.go /START OMIT/,/END OMIT/

Large part of the difficulty of concurrent and multi-threaded programming is memory management.

* Exception Handling (1).
After initially omitting exceptions, the exception-like panic/recover mechanism was eventually added to the language.

Go authors advise using for unrecoverable errors such as those that should halt an entire program or server request.

* Exception Handling (2), defer:
It pushes a function call onto a list. The list of saved calls is executed after the surrounding function returns.

.code code/defer.go /^func CopyFile/,/^}/

Usefull for clean-up actions.

* Exception Handling (3), defer.
- A deferred function's arguments are evaluated when the defer statement is evaluated.
.play code/defer_a.go /^func a/,/^}/
- Deferred function calls are executed in Last In First Out order after the surrounding function returns.
.play code/defer_b.go /^func b/,/^}/

* Exception Handling (4), defer.
- Deferred functions may read and assign to the returning function's named return values.
.play code/defer_c.go /^func c/,/^}/

* Exception Handling (5), panic & recover.
- Panic is a built-in function that stops the ordinary flow of control and begins panicking.
- Recover, is a built-in function that regains control of a panicking goroutine.

* Exception Handling (6), panic & recover.
.play code/panic_recover.go /START OMIT/,/END OMIT/

* Concurrent programming (1), goroutines.
- Concurrent programming is one of the most interesting aspects of the Go language.
- Do not communicate by sharing memory; instead, share memory by communicating.
- Goroutines: are a lightweight thread of execution.

.play code/concurrent.go /START OMIT/,/END OMIT/

* Concurrent programming (2), lock.
.play code/concurrent_lock.go /START OMIT/,/END OMIT/

* Concurrent programming (3), channels.
Channels are the pipes that connect concurrent goroutines. You can send values into channels from one goroutine and receive those values into another goroutine
.play code/channel_ping.go /^func main/,/^}/

* Concurrent programming (4), channels range/close.
A sender can close a channel to indicate that no more values will be sent.
.play code/channel_range.go /START OMIT/,/END OMIT/
The loop for i := range ch receives values from the channel repeatedly until it is closed.

* Concurrent programming (5), channels range/close.
- Only the sender should close a channel, never the receiver. Sending on a closed channel will cause a panic.
- Receivers can test whether a channel has been closed by assigning a second parameter to the receive.
  v, ok := <-ch
  if ok != nil {
     fmt.Println("Channel open")
  }
- Channels aren’t like files; you don’t usually need to close them. Closing is only necessary when the receiver must be told there are no more values coming, such as to terminate a range loop.

* Concurrent programming (6), tip.
Parallelism is simply running things in parallel.
Concurrency is a way to structure your program.

* Q & A
.image images/gopher.png
